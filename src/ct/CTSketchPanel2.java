
package ct;
import java.awt.*;
import java.io.*;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.util.*;
import javax.imageio.ImageIO;
public class CTSketchPanel2 extends javax.swing.JPanel {

  CTModerator moderator;
  Vector sk_dataV;
  int lastX,lastY;
  /** Creates new form CTSketchPanel */
  public CTSketchPanel2(CTModerator moderator) {
    initComponents();
    this.moderator=moderator;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")

  private void initComponents() {

    addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        formMousePressed(evt);
      }
    });
    addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseDragged(java.awt.event.MouseEvent evt) {
        formMouseDragged(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
  }

private void formMousePressed(java.awt.event.MouseEvent evt) {
        if(!(moderator.w.checkOneVar(moderator.auOne_asAMember, 3) ||  moderator.w.getGNS(1).equals(moderator.w.getAHVar("moderatorId")))) return; 

        int x = evt.getX(), y = evt.getY();
        int values[]=new int[]{1,x,y,0,(moderator.jComboBox4.getSelectedItem()!=null && moderator.w.isNumeric((String)moderator.jComboBox4.getSelectedItem())? Integer.parseInt((String)moderator.jComboBox4.getSelectedItem()):1),((Color)moderator.jComboBox3.getSelectedItem()).getRGB(),((Color)moderator.jComboBox1.getSelectedItem()).getRGB()};

        moderator.sk_dataV.add(new CTSketchData(values));
      	moderator.sk_sendCmd(values);
        setData(moderator.sk_dataV);
}

private void formMouseDragged(java.awt.event.MouseEvent evt) {
   if(!(moderator.w.checkOneVar(moderator.auOne_asAMember, 3) ||  moderator.w.getGNS(1).equals(moderator.w.getAHVar("moderatorId")))) return; 
        int x = evt.getX(), y = evt.getY();
        int values[]=new int[]{2,x,y,0,(moderator.jComboBox4.getSelectedItem()!=null && moderator.w.isNumeric((String)moderator.jComboBox4.getSelectedItem())? Integer.parseInt((String)moderator.jComboBox4.getSelectedItem()):1),((Color)moderator.jComboBox3.getSelectedItem()).getRGB(),((Color)moderator.jComboBox1.getSelectedItem()).getRGB()};

        moderator.sk_dataV.add(new CTSketchData(values));
        moderator.sk_sendCmd(values);
        setData(moderator.sk_dataV);

}

 public void setData(Vector dataV){
   this.sk_dataV=(Vector)dataV.clone();
   repaint();
 }

  public void saveImage(String filename){
     try {

       if(filename.indexOf(".")>0){
         File outputfile = new File(filename);
         BufferedImage img = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_RGB);
        this.print(img.getGraphics()); 
         ImageIO.write(img, "png", outputfile);

       } else {
           System.out.println("filename "+filename+" is not a valid image filename (no extension name).");
       }
      } catch (IOException e) {
         e.printStackTrace();
      }
  }
  protected void paintComponent(Graphics g){
    if(sk_dataV!=null && sk_dataV.size()>0){
       CTSketchData data=(CTSketchData)sk_dataV.get(sk_dataV.size()-1);
      g.setColor(new Color(data.values[5]));
      Graphics2D g2=(Graphics2D)g;
      g.fillRect(0, 0, this.getSize().width, this.getSize().height);
    for(int i=0;i<sk_dataV.size();i++){
      data=(CTSketchData)sk_dataV.get(i);
      g.setColor(new Color(data.values[6]));
      switch(data.values[0]){
        case 1:
          if(data.values[4]==1) g.drawOval(data.values[1], data.values[2], 1, 1);
          else g.fillOval(data.values[1]-(int)(((double)data.values[4])/2.0), data.values[2]-(int)(((double)data.values[4])/2.0), data.values[4], data.values[4]);
          lastX = data.values[1]; lastY = data.values[2];
          break;
        case 2:

          g2.setStroke(new BasicStroke(data.values[4]));
          g2.draw(new Line2D.Float(lastX, lastY, data.values[1], data.values[2]));
          lastX = data.values[1]; lastY = data.values[2];
          break;
      }
    }
    }
    else {
      g.setColor((Color)moderator.jComboBox3.getSelectedItem());
      Graphics2D g2=(Graphics2D)g;
      g.fillRect(0, 0, this.getSize().width, this.getSize().height);
    }
  }
}