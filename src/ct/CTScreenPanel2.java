package ct;

import java.awt.*;
import javax.swing.*;
import java.util.*;
import infinity.client.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.*;
public class CTScreenPanel2 extends javax.swing.JPanel {
    private String sep=""+(char)0;

    TreeMap images=null;
    ImageIcon icon;  
    CTModerator moderator;

    Weber w;
    Color bgColor=new Color(0,0,102);
    int fixImgW=0,fixImgH=0,realImgW=0,realImgH,panelW=0,panelH=0;
    long lastSendMoveTime=0,sendMoveInterval=500L;

    public CTScreenPanel2(CTModerator sv,Weber w) {
        this.moderator=sv;
        this.w=w;

        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

  private void initComponents() {

    addMouseWheelListener(new java.awt.event.MouseWheelListener() {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
        formMouseWheelMoved(evt);
      }
    });
    addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        formMouseClicked(evt);
      }
      public void mousePressed(java.awt.event.MouseEvent evt) {
        formMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        formMouseReleased(evt);
      }
    });
    addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        formMouseMoved(evt);
      }
    });
    setLayout(null);
  }

private void formMouseClicked(java.awt.event.MouseEvent evt) {
  if(evt.getClickCount()==2){
    if(moderator.srn_div>1){

        int inx=moderator.getInx(moderator.srn_div, evt.getX(), evt.getY());
        if(moderator.cbb_srnMList.getItemAt(inx+1)!=null){
          moderator.cbb_srnMList.setSelectedIndex(inx+1);
          moderator.srn_setEnv();
          moderator.srn_issueRequest();
        }

    }
  }
}

private void formMousePressed(java.awt.event.MouseEvent evt) {
  String to=(String)moderator.cbb_srnMList.getSelectedItem();
  if(moderator.btn_srnStart.getText().equals(moderator.srn_stopStr) && moderator.srn_div==1 && moderator.rb_srnControlAndImage.isSelected() && ((w.checkOneVar(moderator.auOne_asAMember, 7) && !to.equals(moderator.lattestRemoteTutorName)) || w.getGNS(1).equals(w.getAHVar("moderatorId")) || (w.checkOneVar(moderator.auOne_asAMember, 6) && to.equals(moderator.lattestRemoteTutorName)))){
      int type=1;
      int id=evt.getID();
      int x=evt.getX();
      int y=evt.getY();
      int cnt=evt.getClickCount();
      int modifier=evt.getModifiers();
      int btn=evt.getButton();
      if(moderator.srn_fixToSrn){
        x=getXFromFix(x);
        y=getYFromFix(y);
      }
      String cmd0="performcommand ct.CTRMAction2 rm_mouse2 "+type+" "+id+" "+x+" "+y+" "+cnt+" "+modifier+" "+btn+" "+moderator.srn_currentCode+" "+(moderator.srn_toInform? "1":"0")+" 0 0 0 0 ? ? ? 0";
      w.sendToOneInGroup(cmd0,w.getGNS(11), moderator.srn_currentId);
  }
}

private void formMouseReleased(java.awt.event.MouseEvent evt) {
  String to=(String)moderator.cbb_srnMList.getSelectedItem();
  if(moderator.btn_srnStart.getText().equals(moderator.srn_stopStr) && moderator.srn_div==1 && moderator.rb_srnControlAndImage.isSelected() && ((w.checkOneVar(moderator.auOne_asAMember, 7) && !to.equals(moderator.lattestRemoteTutorName)) || w.getGNS(1).equals(w.getAHVar("moderatorId")) || (w.checkOneVar(moderator.auOne_asAMember, 6) && to.equals(moderator.lattestRemoteTutorName)))){
     int type=2;
      int id=evt.getID();
      int x=evt.getX();
      int y=evt.getY();
      int cnt=evt.getClickCount();
      int modifier=evt.getModifiers();
      int btn=evt.getButton();
      if(moderator.srn_fixToSrn){
        x=getXFromFix(x);
        y=getYFromFix(y);
      }
      String cmd0="performcommand ct.CTRMAction2 rm_mouse2 "+type+" "+id+" "+x+" "+y+" "+cnt+" "+modifier+" "+btn+" "+moderator.srn_currentCode+" "+(moderator.srn_toInform? "1":"0")+" 0 0 0 0 ? ? ? 0";
      w.sendToOneInGroup(cmd0,w.getGNS(11),moderator.srn_currentId);
  }
}

private void formMouseMoved(java.awt.event.MouseEvent evt) {
  String to=(String)moderator.cbb_srnMList.getSelectedItem();
  if(moderator.btn_srnStart.getText().equals(moderator.srn_stopStr) && moderator.srn_div==1 && moderator.rb_srnControlAndImage.isSelected() && ((w.checkOneVar(moderator.auOne_asAMember, 7) && !to.equals(moderator.lattestRemoteTutorName)) || w.getGNS(1).equals(w.getAHVar("moderatorId")) || (w.checkOneVar(moderator.auOne_asAMember, 6) && to.equals(moderator.lattestRemoteTutorName)))){
      int type=3;
      int id=evt.getID();
      int x=evt.getX();
      int y=evt.getY();
      int cnt=evt.getClickCount();
      int modifier=evt.getModifiers();
      int btn=evt.getButton();
      if(moderator.srn_fixToSrn){
        x=getXFromFix(x);
        y=getYFromFix(y);
      }
      String cmd0="performcommand ct.CTRMAction2 rm_mouse2 "+type+" "+id+" "+x+" "+y+" "+cnt+" "+modifier+" "+btn+" "+moderator.srn_currentCode+" "+(moderator.srn_toInform? "1":"0")+" 0 0 0 0 ? ? ? 0";
      w.sendToOneInGroup(cmd0,w.getGNS(11), moderator.srn_currentId);
  }
}

  private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
  String to=(String)moderator.cbb_srnMList.getSelectedItem();
  if(moderator.btn_srnStart.getText().equals(moderator.srn_stopStr) && moderator.srn_div==1 && moderator.rb_srnControlAndImage.isSelected() && ((w.checkOneVar(moderator.auOne_asAMember, 7) && !to.equals(moderator.lattestRemoteTutorName)) || w.getGNS(1).equals(w.getAHVar("moderatorId")) || (w.checkOneVar(moderator.auOne_asAMember, 6) && to.equals(moderator.lattestRemoteTutorName)))){

       int notches = evt.getWheelRotation();
       String cmd0="performcommand ct.CTRMAction2 rm_mousewheel2 "+notches+"  "+(evt.getScrollType() == java.awt.event.MouseWheelEvent.WHEEL_UNIT_SCROLL)+" "+moderator.srn_currentCode+" "+(moderator.srn_toInform? "1":"0")+" 0 0 0 0 ? ? ? 0";
      w.sendToOneInGroup(cmd0,w.getGNS(11), moderator.srn_currentId);
  }

  }
int getXFromFix(int x){
  if(panelW==fixImgW){
    x=(int)(((double)x)*(((double)realImgW)/((double)fixImgW)));
  } else {
    x=x-(int)(((double)(panelW-fixImgW))/2.0);
    x=(int)(((double)x)*(((double)realImgW)/((double)fixImgW)));
  }
  return x;
}
int getYFromFix(int y){
  if(panelH==fixImgH){
    y=(int)(((double)y)*(((double)realImgH)/((double)fixImgH)));
  } else {
    y=y-(int)(((double)(panelH-fixImgH))/2.0);
    y=(int)(((double)y)*(((double)realImgH)/((double)fixImgH)));
  }
  return y;
}

public void clear(){
  images=null;
  repaint();
}

  public void setImages(TreeMap img){
    images = (TreeMap)img.clone();

    if(moderator.srn_div==1){
    try{
      

      repaint(); 
      if(moderator.srn_toInform) {
        String contCmd="performcommand ct.CTRMAction2 getimg2 "+moderator.srn_imgByRobot+" "+moderator.srn_currentCode+" 1 0 null null null null null 0 0 0 0 ? ? ? 0";
        w.sendToOne(contCmd,moderator.srn_currentId);
        System.gc();
      }
    } catch (Exception e) { 
        e.printStackTrace(); 

      } 
    }
    else if(moderator.srn_div>1){
      repaint();
    }
  }

  public void saveImage(String filename){
    if(moderator.srn_div==1){
     try {

       if(filename.indexOf(".")>0){
         File outputfile = new File(filename);
         BufferedImage img = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_RGB);
        this.print(img.getGraphics()); 
         ImageIO.write(img, "png", outputfile);

       } else {
           System.out.println("filename "+filename+" is not a valid image filename (no extension name).");
       }
      } catch (IOException e) {
         e.printStackTrace();
      }
    }  else if(moderator.srn_div>1){
     try {

       if(filename.indexOf(".")>0){
         File outputfile = new File(filename);
         BufferedImage img = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_RGB);
        this.print(img.getGraphics()); 
         ImageIO.write(img, "png", outputfile);

       } else {
           System.out.println("filename "+filename+" is not a valid image filename (no extension name).");
       }
      } catch (IOException e) {
         e.printStackTrace();
      }
    }
  }
protected void paintComponent(Graphics g) { 
    Insets insets = getInsets(); 
    g.setColor(bgColor); 

    if (images != null) { 
      if(moderator.srn_fixToSrn || moderator.srn_div>1){
          g.fillRect(0,0, insets.left + getWidth(), insets.top + getHeight()); 
          Dimension d=getSize();

          panelW=d.width;
          panelH=d.height;
          double r2=((double)d.width)/((double)d.height);
          double w2=((double)d.width)/((double)moderator.srn_div);
          double h2=((double)d.height)/((double)moderator.srn_div);
          int ah=0,aw=0,x3=0,y3=0; double h3=0.0,w3=0.0;
          for(int i=0;i<moderator.srn_div;i++){
            for(int j=0;j<moderator.srn_div && (i*moderator.srn_div+j)<moderator.srn_viewCount;j++){
              CTImgClass ic=(CTImgClass)images.get(i*moderator.srn_div+j);
              if(ic!=null && ic.img!=null){
              Image img=ic.img;
                realImgW=img.getWidth(this);
                realImgH=img.getHeight(this);
              double h=(double)realImgH,w=(double)realImgW;
              double r1=((double)w)/((double)h);
              if(r1>r2){
                h3=(h/w*w2);
                ah= (int)(h2/2.0-h3/2.0);
                x3=insets.left+(j*(int)w2);
                y3=(i*(int)h2)+ah;
                if(img!=null) g.drawImage(img, x3,y3, (int)w2, (int)h3, this);
                fixImgW=(int)w2;
                fixImgH=(int)h3;
              } else {
                  w3=(w/h*h2);
                  aw= (int)(w2/2.0-w3/2.0);
                  x3=(j*(int)w2)+aw;
                  y3=insets.top+(i*(int)h2);
                  if(img!=null) g.drawImage(img, x3,y3, (int)w3, (int)h2, this);
                  fixImgW=(int)w3;
                  fixImgH=(int)h2;
                }
              }
              if(moderator.srn_div>1){
                Font font=g.getFont();
                int x4=10,y4=10,fontSize=font.getSize(),x4Max=20,y4Max=20,x4Min=2,y4Min=2,fontSizeMax=36,fontSizeMin=8;
                float rate=((float)(moderator.srn_div-2))/10.0f;
                if(rate>1.0f) rate=1.0f;
                x4=Math.round(((float)x4Max)-((float)(x4Max-x4Min))*rate);
                y4=Math.round(((float)y4Max)-((float)(y4Max-y4Min))*rate);
                fontSize=Math.round(((float)fontSizeMax)-((float)(fontSizeMax-fontSizeMin))*rate);
                font=new Font(font.getName(),font.getStyle(),fontSize);
                g.setFont(font);
                g.setColor(Color.ORANGE);
                g.drawString(ic.nodeName, x3+x4, y3+y4+fontSize);
              }
            }
          }
      } else {
            CTImgClass ic=(CTImgClass)images.get(0);
            Image img=ic.img;
            if(img!=null && ic.randomCode.equals(moderator.srn_currentCode)) {
              setPreferredSize(new Dimension(img.getWidth(this),img.getHeight(this)));
              g.fillRect(0,0, insets.left + img.getWidth(null), insets.top + img.getHeight(null)); 
              g.drawImage(img, insets.top, insets.left, this);

            }
        } 
    }
  } 
}